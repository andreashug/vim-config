snippet ugt "import ugettext_lazy" b
from django.utils.translation import ugettext_lazy as _
endsnippet

snippet gtl "import gettext_lazy" b
from django.utils.translation import gettext_lazy as _
endsnippet


snippet ipdb "ipdb breakpoint" i
import ipdb; ipdb.set_trace()  # TODO: remove
endsnippet


snippet dmc "django model" b
class ${1:ModelName}(models.Model):
	$0

	class Meta:
		verbose_name = _('`!p snip.rv = t[1].lower()`')
		verbose_name_plural = _('`!p snip.rv = t[1].lower()`s')

	def __str__(self):
		return ''
endsnippet


snippet dmf "django field" iw
${1:fieldname} = models.${2:Type}Field(_('`!p snip.rv=t[1].replace('_', ' ')`')$3)$0
endsnippet

snippet dmc "django char field" iw
${1:fieldname} = models.CharField(_('`!p snip.rv=t[1].replace('_', ' ')`'), max_length=${2:200}$3)$0
endsnippet

snippet dmfk "django foreign key field" iw
${1:fieldname} = models.ForeignKey(
	${2:target}, verbose_name=_('$1'),
	related_name='$3', on_delete=models.${4:CASCADE}$4)$0
endsnippet

# Factory Boy

snippet fbc "factory boy django factory" b
class ${1:Name}Factory(factory.django.DjangoModelFactory):
	$0

	class Meta:
		model = $1
endsnippet

snippet fbsub "factory boy sub factory" b
factory.SubFactory(${1:model}Factory)
endsnippet

snippet fblaz "factory boy lazy attribute" b
factory.LazyAttribute(lambda o: o.${1:attr})
endsnippet

snippet fbseq "factory boy sequence" b
factory.Sequence(lambda i: ${1:attr})
endsnippet

snippet fbfak "factory boy faker" b
factory.Faker('${1:attr}')
endsnippet

snippet fbpost "factory boy post generation" b
@factory.post_generation
def ${1:name}(self, create, extracted, **kwargs):
	if not create or not extracted:
		return
	$0
endsnippet

snippet dac "django model admin" b
@admin.register($1)
class ${1:Name}Admin(admin.ModelAdmin):
	$0
endsnippet

snippet dai "django admin inline" b
class ${1:Name}Inline(admin.${2:Tabular}Inline):
	model = $1$0
endsnippet

snippet serializer "drf serializer" b
class ${1:ModelName}Serializer(serializers.ModelSerializer):
	$0
	class Meta:
		model = $1
		fields = [$0]
endsnippet

snippet ptc "pytest class" b
@pytest.mark.django_db
class Test${1:Name}:

	def test_$2(self$3):
		$0
endsnippet
